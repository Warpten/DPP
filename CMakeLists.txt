#
# D++ (DPP), The Lightweight C++ Discord Library
#
# Copyright 2021 Craig Edwards <support@brainbox.cc>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cmake_minimum_required (VERSION 3.16)

include(CheckCXXSymbolExists)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# ###################################################################################################################
# Declare options
if (VCPKG_TARGET_TRIPLET MATCHES "-static")
  option(BUILD_SHARED_LIBS       "Build shared libraries"                         OFF)
else ()
  option(BUILD_SHARED_LIBS       "Build shared libraries"                         ON )
endif()

option(DPP_RUN_LDCONFIG        "Run ldconfig after installation"                ON )
option(DPP_BUILD_VOICE_SUPPORT "Build voice support"                            OFF)
option(DPP_INSTALL_TARGET      "Generate the install target"                    ON )
option(DPP_BUILD_TEST_TARGET   "Build the test program"                         ON )
option(DPP_EXPERIMENTAL_CORO   "Experimental support for C++20 coroutines"      OFF)
option(DPP_USE_EXTERNAL_JSON   "Use an external installation of nlohmann::json" OFF)

# ###################################################################################################################
# Compute DPP version for CMake manifest
file(READ "${CMAKE_CURRENT_SOURCE_DIR}/include/dpp/version.h" DPP_VERSION_HEADER)

if(NOT DPP_VERSION_HEADER MATCHES "DPP_VERSION_SHORT ([0-9][0-9])([0-9][0-9])([0-9][0-9])")
  message(FATAL_ERROR "Cannot get DPP_VERSION_SHORT from version.h")
endif()

math(EXPR DPP_VERSION_MAJOR "${CMAKE_MATCH_1}")
math(EXPR DPP_VERSION_MINOR "${CMAKE_MATCH_2}")
math(EXPR DPP_VERSION_PATCH "${CMAKE_MATCH_3}")

string(CONCAT DPP_VERSION "${DPP_VERSION_MAJOR}.${DPP_VERSION_MINOR}.${DPP_VERSION_PATCH}")

# ###################################################################################################################
# Environment setup for CMake
# Add our scripts to CMake environment so we can find dependencies
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")

# Needed to generate source
find_package(PHP QUIET)

if (PHP_FOUND)
  message(STATUS "-- Checking for updates to autogenerated files.")

  execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
    COMMAND php ./buildtools/make_struct.php "\\Dpp\\Generator\\SyncGenerator"
  )

  set_source_files_properties("${PROJECT_SOURCE_DIR}/include/dpp/cluster_sync_calls.h"
    PROPERTIES GENERATED TRUE
  )
endif ()

# ###################################################################################################################
# Validate options
#  Coroutine support can't be enabled if PHP is not available on your system.
if (DPP_EXPERIMENTAL_CORO AND NOT PHP_FOUND)
  message(WARNING "-- PHP is not on your system; coroutine support has been disabled.")

  set(DPP_EXPERIMENTAL_CORO OFF)
endif ()

#  Sodium/Opus do not get validated because if they are not resolved, the defines controlling
#  that part of the code are not enabled.

# ###################################################################################################################
# Enable VCPKG features to allow find_package to work.
if (DPP_EXPERIMENTAL_CORO)
  list(APPEND VCPKG_MANIFEST_FEATURES "coro")
endif ()

if (DPP_BUILD_VOICE_SUPPORT)
  list(APPEND VCPKG_MANIFEST_FEATURES "voice")
endif ()

# ###################################################################################################################
# Declare the project now.
project(libdpp
  VERSION "${DPP_VERSION}"
  LANGUAGES CXX
  HOMEPAGE_URL "https://dpp.dev/"
  DESCRIPTION "An incredibly lightweight C++ Discord library."
)

message(STATUS "-- Building shared libraries:               ${BUILD_SHARED_LIBS}")
message(STATUS "-- Building with voice support:             ${DPP_BUILD_VOICE_SUPPORT}")
message(STATUS "-- Building test targets:                   ${DPP_BUILD_TEST_TARGET}")
message(STATUS "-- Building with coroutines:                ${DPP_EXPERIMENTAL_CORO}")
# Note that the bundled version of nlohmann::json is quite old. Apparentlt this is due to the new one spewing errors.
message(STATUS "-- Building with external nlohmann::json:   ${DPP_USE_EXTERNAL_JSON}")

if (NOT BUILD_SHARED_LIBS AND DPP_BUILD_VOICE_SUPPORT AND WIN32 AND NOT MINGW)
  message(FATAL_ERROR "You're attempting to statically link to code that will likely produce a binary well over the maximum size allowed by Microsoft. Consider switching to dynamic linking.")
  
  # Arcane threads uncovered by Google suggest passing `/MaxILKSize:2147483647` to the linker, but that doesn't appear to work anymore.
  # Why are the binaries this big?
endif()

add_subdirectory(dep EXCLUDE_FROM_ALL)
add_subdirectory(library)
